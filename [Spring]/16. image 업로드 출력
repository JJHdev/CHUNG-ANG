# 16. image 업로드 출력

1. multypart-resolve 사용하기위한 설정 ( pom.xml설정 추가)

```xml
<!-- 파일업로드 라이브러리
		     commons-fileupload 와  commons-io 필요 -->
		<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.3.3</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.6</version>
 		</dependency>
```

1. servlet-context.xml에 관련 빈 추가

```xml
<!-- 멀티파트 리졸버 : 다수 개 파일을 한번에 업로드 가능 -->
    <beans:bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
       <beans:property name="maxUploadSize" value="52428800" />  <!-- 최대 업로드 가능한 파일크기 설정 여기에서는 약 52mb -->
       <beans:property name="maxInMemorySize" value="1000000" />  <!-- 임시파일을 생성하기 전에 메모리에 보관할 수 있는 최대 byte수 설정 dir 1mb -->
       <beans:property name="defaultEncoding" value="utf-8" />	<!-- 매개변수의 인코딩 설정 -->
    </beans:bean>
```

1. 이미지 업로드 form (다중 업로드 사용가능하게 버튼추가)

```html
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="contextPath" value="<%=request.getContextPath()%>"></c:set>
<!DOCTYPE html>
<html>
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
<meta charset="UTF-8">
<title>파일 업로드</title>
<script>
let count =1;

	$(document).ready(function(){
		$("#btnDelFile").click(function(){
			if(count==1){ //유지해야하는 파일수 보다 적다면
				alert("1개이상은 있어야 합니다.");
				return; //함수종료
			}
			let tr=$("#files"+count).parents("tr");
			//id가 "i1"요소의 바로 앞에 위치한 형제(자매)를 삭제한다.
			//$(기준요소).remove(추가할요소) => 선택요소는 남고, 그 자손요소가 제거 된다.
			//기준요소(선택자 =>부모요소).remove(자식요소제거)
			$(tr).remove()
			count--;
		});
		$("#btnAddFile").click(function(){
			count++;
			if(count==4){ //허용된 파일수 보다 크다면
				alert("최대 3개입니다.");
				count=3;
				return; //함수종료
			}
			let tr = "<tr><th>첨부파일</th><td>";
					tr+= "<input type='file' name='file"+count+"' id='files"+count+"'/></td></tr>";
			//id가 i1인 요소의 바로 앞에 추가할것
			//$(기준요소).before(추가할 요소);
			$("#i1").before(tr);
		});
	});		
		
		/* let count=0; //업로드 파일 개수를 제한하는 변수
		let n=1;  // unique함을 처리하기 위한 변수
		
		//파일 삭제 버튼
		$("#btnDelFile").click(function(){
			if(count==0){
			alert("~~");
				alert("첨부파일은 최소 1개 입니다.");
				return;
			}
			count--;
			$('#fileArea').empty();
		});
	
		// 파일 추가 버튼 
		$("#btnAddFile").click(function(){
			alert("~");
			count++;
			if(count==4){
				alert("첨부파일은 최대 3개입니다.");
				count=3;
				return;
			}
			//$('#fileArea').append("<input type='file' name='file"+n+"'/><br/>");
			n++;
		}); */

</script>
</head>
<body>

	<h3>uploadForm.jsp</h3>
	<form id="uploadForm" method="post" enctype="multipart/form-data" action="${contextPath}/upload">
	<table border="1">
		<tr>
			<th>이름</th>
			<td>
			<label for="memberId"><input type="text" name="memberId" id="memberId" required="required"></label>
			</td>
		</tr>
		<tr>
			<th>파일첨부</th>
			<td>
				<input type="button" id="btnAddFile" value="파일추가"/>		
				<input type="button" id="btnDelFile" value="파일삭제"/>	
			</td>
		</tr>
		<tr>
			<th>첨부파일</th>
			<td>
					<input type="file" name="file1" id="files1"/>
			</td>
		</tr>
		<tr id="i1">
			<td colspan="2" style="text-align: center;">
				<input type="submit" value="upload하기"/>
			</td>
		</tr>
	</table>
	<!-- 업로드용 파일찾기 버튼이 동적으로 생성추가되는 영역 -->	
<!-- 		<div id="fileArea">
				</div> -->
	
	
<!-- 		<label for="memberId">이름<input type="text" name="memberId" id="memberId"></label>
		<br/>
			<input type="button" id="btnAddFile" value="파일추가"/>		
			<input type="button" id="btnDelFile" value="파일삭제"/>		
			<input type="submit" value="upload하기"/>		
		<br/><br/>
		
		 업로드용 파일 찾기 버튼이 동적으로 생성추가되는 영역
		<div id="fileArea">
		</div> -->
	</form>
	
	
</body>
</html>
```

1. 파일 업로드 uploadExController

```java
package com.mycom.image.test;

import java.io.File;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class UploadExController {

	@GetMapping("/upload")
	public String showForm() {
		return "file/uploadForm";
	}
	
	//업로드하기.
	@PostMapping("/upload")
	public ModelAndView uploadForm(MultipartHttpServletRequest multipartRequest,ModelAndView mv) throws Exception  {
		
		Map map = new HashMap();
		//1. form요소중에서 <input type="file">이 아닌 요소의 name속성의 값)파라미터명 가져오기.
		Enumeration enu = multipartRequest.getParameterNames();
		while(enu.hasMoreElements()) {
			String name = (String)enu.nextElement();
			String value= multipartRequest.getParameter(name);
			map.put(name, value); //name에 들어가는 memberId, file1, file2 ~ 순서로 온다.
		}
		//2. form요소중에서 <input type="file">인 요소의 name속성의 값)파라미터명 가져오기.
		//여기에서는 다중파일 업로드이므로 n개이니 List처리하겠다.
		List fileList =fileProc(multipartRequest);
		map.put("fileList",fileList);
		
		//model
		mv.addObject("map",map);
		mv.setViewName("file/result");
		return mv;
	}
	
	//파일저장경로
	private static final String REPO_PATH ="C:\\springStudy\\wk-sts\\image\\src\\main\\resources\\images";
	
	/* List에서 
	 * 참조변수명.add(value) : value 추가 
	 * 참조변수명.get(value) : value 꺼내오기*/
	//첨부파일에 대한 정보(=>사용자가 업로드한 원래 파일명 목록)+upload
	public List fileProc(MultipartHttpServletRequest multipartRequest) throws Exception {
		List<String> fileList =new ArrayList<String>();
		Iterator<String> fileNames = multipartRequest.getFileNames();
		
		while(fileNames.hasNext()) { //첨부파일수만큼 반복해서 -> 첨부파일 정보 뺴내서+upload -> list에
			String fileName =fileNames.next();//첨부파일이름 가져오기
			MultipartFile mFile  =multipartRequest.getFile(fileName);//지정한 이름을 가진 파일 가져오기
			
			//getOriginalFilename(): 사용자가 업로드한 원래 파일명(String으로 준다)
			String originalFilename= mFile.getOriginalFilename();
			System.out.println("originalFilename="+originalFilename);
			fileList.add(originalFilename);
			
			//upload
			//지정위치 하위에 파일객체 생성
			File file = new File(REPO_PATH+"\\"+fileName);
			if(mFile.getSize()!=0) {//첨부된 파일이 존재한다면, empty이면 0으로 반환한다.
				System.out.println("첨부된 파일이 존재한다면");
				if(!file.exists()){//경로에 파일이 없으면
					if(file.getParentFile().mkdirs()) {//해당경로에 폴더를 생성했다면 (mkdir은 디렉토리를 만들겠다.)
						 file.createNewFile();//파일생성한다.
					}//inner2 if끝
				}//inner1 if끝
				mFile.transferTo(new File(REPO_PATH+"\\"+originalFilename));
			}//exter if끝
		}//while
		return fileList;
	}
}
```

1. file 경로 메소드 설정

![화면 캡처 2023-02-24 164643.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/936b2ce7-95b0-4752-91fc-c0c7ec8d48d5/%ED%99%94%EB%A9%B4_%EC%BA%A1%EC%B2%98_2023-02-24_164643.png)

1. DownloadExController (원본파일 이용)

```java
//파일저장경로
	private static final String REPO_PATH ="C:\\springStudy\\wk-sts\\image\\src\\main\\resources\\images";
	
	@RequestMapping("/download1")
	public void download1(@RequestParam("imageFileName") String imageFileName,
            HttpServletResponse response) throws Exception {
		System.out.println("1번째 download");
		OutputStream out = response.getOutputStream();
		String downFile = REPO_PATH + "\\" + imageFileName;
		File file = new File(downFile);//다운로드할 파일객체생성
		//response.setHeader()  응답헤더정보 설정
		//Cache-Control   HTTP 1.1 버전에서 지원하는 헤더로서, 이 헤더의 값을 "no-cache"로 지정하면 웹 브라우저는 응답 결과를 캐시하지 않는다.
		/*캐시란?-브라우저(클라이언트)가 저장해 놓은 데이터
		-웹 브라우저가 WAS에 같은 jsp파일을 2번 이상 요청할 때 불필요한 응답 요청을 방지하기 위해 사용한다.
		-웹 브라우저의 응답속도 향상되는 효과가 있다.*/
		response.setHeader("Cache-Control","no-cache");
		response.addHeader("Content-disposition","attachment; fileName="+imageFileName);//Content-Disposition을 통해 파일명을 설정
		//버퍼를 이용하여   파일정보를     한 번에 8byte씩  읽어들이고 
		FileInputStream in = new FileInputStream(file);
		byte[] buffer = new byte[1024 * 8];
		while (true) {
			int count = in.read(buffer); 
			if (count == -1) //더 이상 읽어들일 것이 없다면
			break; //읽어들이는 것을 멈추어라
			out.write(buffer, 0, count); //읽은 내용 브라우저에 전송하기(-> 웹브라우저에 출력됨. 여기에서는 result.jsp문서에 출력됨)
		}
		in.close();//입력스트림닫기
		out.close();//출력스트림닫기
	}
```

1. DownloadExController (썸네일파일 만들어서 이용)
    
    ```java
    //썸네일 이미지로 생성및 출력 => 다수이미지를 사용한 웹페이지에서 사용하면 이미지가 신속하게 표시될수있다.
    	@RequestMapping("/download2")
    	public void download2(@RequestParam("imageFileName") String imageFileName,
                HttpServletResponse response) throws Exception {
    		
    		System.out.println("2번째 download");
    		OutputStream out = response.getOutputStream();
    		String filePath = REPO_PATH + "\\" + imageFileName;
    		File image = new File(filePath);//다운로드할 파일객체생성
    		
    		//thumbnail용 이미지 생성 
    		int lastIndex =imageFileName.lastIndexOf("."); // 파일이름에서 .png에서 .을 찾아 인덱스번호숫자를 준다.
    		String thumbfileName = imageFileName.substring(0,lastIndex-1); // .을 제외한 앞자리 숫자와 순수한 파일 이름만 추출한다.
    		File thumbnail = new File(REPO_PATH+"\\thumbnail\\"+thumbfileName+".png");//썸네일용 다운로드할 파일객체생성
    		if(image.exists()) {
    			thumbnail.getParentFile().mkdirs();
    			//가로세로 size를 50px인 png썸네일 이미지를 생성.
    			Thumbnails.of(image).size(50,50).outputFormat("png").toFile(thumbnail);
    		}
    		
    		//response.setHeader()  응답헤더정보 설정
    		//Cache-Control   HTTP 1.1 버전에서 지원하는 헤더로서, 이 헤더의 값을 "no-cache"로 지정하면 웹 브라우저는 응답 결과를 캐시하지 않는다.
    		/*캐시란?-브라우저(클라이언트)가 저장해 놓은 데이터
    		-웹 브라우저가 WAS에 같은 jsp파일을 2번 이상 요청할 때 불필요한 응답 요청을 방지하기 위해 사용한다.
    		-웹 브라우저의 응답속도 향상되는 효과가 있다.*/
    		response.setHeader("Cache-Control","no-cache");
    		response.addHeader("Content-disposition","attachment; fileName="+imageFileName);//Content-Disposition을 통해 파일명을 설정
    		
    		//버퍼를 이용하여   파일정보를     한 번에 8byte씩  읽어들이고 
    		FileInputStream in = new FileInputStream(thumbnail);
    		byte[] buffer = new byte[1024 * 8];
    		while (true) {
    			int count = in.read(buffer); 
    			if (count == -1) //더 이상 읽어들일 것이 없다면
    			break; //읽어들이는 것을 멈추어라
    			out.write(buffer, 0, count); //읽은 내용 브라우저에 전송하기(-> 웹브라우저에 출력됨. 여기에서는 result.jsp문서에 출력됨)
    		}
    		in.close();//입력스트림닫기
    		out.close();//출력스트림닫기
    	}
    ```
    

1. 썸네일 파일 만들지 않고 출력만
    
    ```java
    //썸네일 이미지로 생성및 출력 => 다수이미지를 사용한 웹페이지에서 사용하면 이미지가 신속하게 표시될수있다.
    		@RequestMapping("/download3")
    		public void download3(@RequestParam("imageFileName") String imageFileName,
    	            HttpServletResponse response) throws Exception {
    			
    			System.out.println("3번째 download");
    			OutputStream out = response.getOutputStream();
    			String filePath = REPO_PATH + "\\" + imageFileName;
    			File image = new File(filePath);//다운로드할 파일객체생성
    			
    			//thumbnail용 이미지 생성 
    			int lastIndex =imageFileName.lastIndexOf("."); // 파일이름에서 .png에서 .을 찾아 인덱스번호숫자를 준다.
    			String thumbfileName = imageFileName.substring(0,lastIndex-1); // .을 제외한 앞자리 숫자와 순수한 파일 이름만 추출한다.
    			File thumbnail = new File(REPO_PATH+"\\thumbnail\\"+thumbfileName+".png");//썸네일용 다운로드할 파일객체생성
    			if(image.exists()) {
    				thumbnail.getParentFile().mkdirs();
    				//가로세로 size를 50px인 png썸네일 이미지를 생성.
    				Thumbnails.of(image).size(50,50).outputFormat("png").toOutputStream(out);;
    			}
    			
    			//response.setHeader()  응답헤더정보 설정
    			//Cache-Control   HTTP 1.1 버전에서 지원하는 헤더로서, 이 헤더의 값을 "no-cache"로 지정하면 웹 브라우저는 응답 결과를 캐시하지 않는다.
    			/*캐시란?-브라우저(클라이언트)가 저장해 놓은 데이터
    			-웹 브라우저가 WAS에 같은 jsp파일을 2번 이상 요청할 때 불필요한 응답 요청을 방지하기 위해 사용한다.
    			-웹 브라우저의 응답속도 향상되는 효과가 있다.*/
    			response.setHeader("Cache-Control","no-cache");
    			response.addHeader("Content-disposition","attachment; fileName="+imageFileName);//Content-Disposition을 통해 파일명을 설정
    			
    			byte[] buffer = new byte[1024 * 8];
    				out.write(buffer); //읽은 내용 브라우저에 전송하기(-> 웹브라우저에 출력됨. 여기에서는 result.jsp문서에 출력됨)
    			out.close();//출력스트림닫기
    		}
    ```
    

10. 출력 페이지.

```html
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cPath" value="<%=request.getContextPath()%>"></c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<style>
.imgSize {width: 150px;}
</style>

</head>
<body>
	<h3>result.jsp</h3>
	map:${map}<br/>
	*이름: ${map.memberId}<br/><br/>
	<c:forEach var="imageFileName" items="${map.fileList}">
	download1:
		<img src="${cPath}/download1?imageFileName=${imageFileName}" class="imgSize"/><br/>

	<!-- 썸네일 파일 만들어주고 출력해주는 경로 -->
	download2:
		<img src="${cPath}/download2?imageFileName=${imageFileName}"/><br/>
	<!-- 썸네일 파일 안만들고 썸네일 출력만 하는 경로 -->
	download3:
		<img src="${cPath}/download3?imageFileName=${imageFileName}"/><br/>
	</c:forEach>
</body>
</html>
```

.
