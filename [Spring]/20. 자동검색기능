# 20. 자동검색기능

1. pom.xml 에서 아래와 같은 dependency추가 

```xml
<!-- JSON  --> 
      <dependency>
         <groupId>com.fasterxml.jackson.core</groupId>
         <artifactId>jackson-databind</artifactId>
         <version>2.5.4</version>
      </dependency>
			<dependency>
          <groupId>net.sf.json-lib</groupId>
          <artifactId>json-lib</artifactId>
          <version>2.4</version>
          <classifier>jdk15</classifier>    
      </dependency>
```

1. html 코드

```java
<div id="search" >
		<form name="frmSearch" action="${conPath}/goods/searchGoods" >
			<input name="searchWord" class="main_input" type="text"  onKeyup="keywordSearch()"> 
			<input type="submit" name="search" class="btn1"  value="검 색" >
		</form>
	</div>
   <%-- 자동완성키워드가 출력되는 영역 --%>	
   <div id="suggest">
     <div id="suggestList"></div>
   </div>
```

1. jqeury

```jsx

<script>

 var loopSearch=true;

 //검색키워드를 입력할 때 마다 호출
 //책제목에 검색키워드가 포함된 책제목 목록을 db에서 가져와 화면에 출력
function keywordSearch(){
	        	  
	if(loopSearch==false){
		return;
	}
	
	//user가 입력한 값 가져오기
	let value = $("#main_input").val();
	
	$.ajax({
		type:"GET",//요청방식.
		async:"true",//기본값은 true.(true이면 비동기식방식)
		url:"${conPath}/goods/keywordSearch",//요청url. 예) /board/boardList.do
		data:{keyword:value},//서버로 전송할 데이터. 예){name:"홍GD"}
		success:function(data,status,xhr){//정상응답후 호출되는 함수
			//data: 서버로부터 응답받은 내용
			//status: 응답코드 , /xhr: xhr헤더
			//서버로부터 응답받은 내용 책제목 목록인 data변수값을  JSON으로 변환
		 let jsonInfo = JSON.parse(data);
		 displayResult(jsonInfo);
		},error:function(xhr,status,error){
		 //오류발생시 호출되는 함수
		 //응답을 받지 못하거나, 데이터형식을 확인하지 못할 때 호출
		 //에러코드 => xhr.status       //예)404
		 //에러메세지=>xhr.responseText
		 alert("에러가 발생했습니다");
		}
 	});//ajax끝	
 }//keywordSearch()끝
 
 	//DB에서 가져온 책제목 목록을 화면에 출력
	function displayResult(jsonInfo){
		var count = jsonInfo.keyword.length;
		if(count > 0) {
		    var html = '';
		    for(var i in jsonInfo.keyword){
			   html += "<a href=\"javascript:select('"+jsonInfo.keyword[i]+"')\">"+jsonInfo.keyword[i]+"</a><br/>";
		    }
		    var listView = document.getElementById("suggestList");
		    listView.innerHTML = html;
		    show('suggest');
		}else{
		    hide('suggest');
		} 
	}
	
 	//selectedKeyword : (서버로부터응답받은목록)출력된 검색키워드목록에서 USER가 선택한 문자열
	function select(selectedKeyword) {
		 $("input[name='searchWord']").val(selectedKeyword);
		 loopSearch = false;  //반복종류
		 hide('suggest'); 
	}
		
	function show(elementId) {
	 var element = document.getElementById(elementId);
	 if(element) {
	  element.style.display = 'block';
	 }
	}
	
	//(서버로부터응답받은목록)출력된 검색키워드목록숨기기
	function hide(elementId){
	   var element = document.getElementById(elementId);
	   if(element){
		  element.style.display = 'none';
	   }
	}	
</script>

<html>
<%-- 자동완성키워드가 출력되는 영역 --%>	
   <div id="suggest">
     <div id="suggestList"></div>
   </div>
```

1. 컨트롤러에서 ajax로 넘어온 값을 select조회하여  html로 넘어오게 작성한다.
2. 컨트롤러 예시로는 

```java
@RequestMapping(value="/goods/keywordSearch",
			method=RequestMethod.GET,
			produces="application/text;charset=utf8")
	public @ResponseBody String keywordSearch(@RequestParam("keyword") String keyword) throws Exception {
		
		if(keyword==null || keyword.equals(""))
			return null;
		
		//리턴      List<String> : 책이름 목록
		List<String> keywordList = goodsService.keywordSearch(keyword);
		
		//JSONObject객체생성
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("keyword",keywordList);
		
		//JSONObject객체를 문자열로 변환
		String jsonInfo = jsonObject.toString(); 
		
		return jsonInfo; //클라이언트에게 응답
	}
```

.
