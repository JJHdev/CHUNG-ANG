# 22. 트랜잭션

1. 사용방법은 Serivce위에 어노테이션을 추가한다.
    
    ```java
    Transaction Propagation의 종류
    · REQUIRED (default) : 이미 시작된 트랜잭션이 있으면 참여하고 없으면 새로 시작한다. 
                         중간에 자식/부모에서 rollback이 발생된다면 자식과 부모 모두 rollback
    · REQUIRES_NEW : 무조건 새로운 트랜잭션을 시작한다. 이미 진행 중인 트랜잭션이 있으면 트랜잭션을 잠시 보류시킨다.
    · SUPPORTS : 이미 시작된 트랜잭션이 있으면 참여하고, 없으면 트랜잭션없이 진행한다.
    · NESTED :중첩된 트랜잭션은 먼저 시작된 부모 트랜잭션의 커밋과 롤백에는 영향을 받지만 자신의 커밋과 롤백은 부모 트랜잭션에게 영향을 주지 않는다. 
                        메인 트랜잭션이 롤백되면 중첩된 로그 트랜잭션도 같이 롤백되지만, 
                        반대로 중첩된 로그 트랜잭션이 롤백돼도 메인 작업에 이상이 없다면 메인 트랜잭션은 정상적으로 커밋된다.
                        즉=>부모 트랜잭션에 예외가 발생하면 자식 트랜잭션도 rollback한다.
                    자식 트랜잭션에 예외가 발생하더라도 부모 트랜잭션은 rollback하지 않는다.
              이 때 롤백은 부모 트랜잭션에서 자식 트랜잭션을 호출하는 지점까지만 롤백된다. 
              이후 부모 트랜잭션에서 문제가 없으면 부모 트랜잭션은 끝까지 commit 된다.
    · MANDATORY :무조건 부모 트랜잭션에 합류시킨다.
               부모 트랜잭션이 존재하지 않는다면 예외를 발생시킨다.    
              REQUIRED와 비슷하게 이미 시작된 트랜잭션이 있으면 참여한다. 
               반면에 트랜잭션이 시작된 것이 없으면 새로 시작하는 대신 예외를 발생시킨다. 
              혼자서는 독립적으로 트랜잭션을 진행하면 안 되는 경우에 사용한다.
    * NEVER   : 메소드가 트랜잭션을 필요로 하지 않는다. 
              만약 진행 중인 트랜잭션이 존재하면 익셉션이 발생한다.
    ```
    
    .
