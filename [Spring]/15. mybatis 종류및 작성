# 15. mybatis 종류및 작성

1. pom.xml에서 mybis 관련 디펜던스 추가하기
    
    ```xml
    <!-- mybatis관련 라이브러리등록 -->
          <!-- mybatis : mybatis를 위한 라이브러리 -->
          <dependency>
             <groupId>org.mybatis</groupId>
             <artifactId>mybatis</artifactId>
             <version>3.1.0</version>
          </dependency>
          <!-- mybatis-spring : mybatis와 spring을 연결 라이브러리 -->
          <dependency>
             <groupId>org.mybatis</groupId>
             <artifactId>mybatis-spring</artifactId>
             <version>1.1.0</version>
          </dependency>
    ```
    
2. Db연동과 mybtis 관련 프로퍼티즈 추가하기 (action-mybatis) 
    1. WEB-INF ⇒ spring 에 추가하기
    
    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <beans
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd" 
     xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans">
     
     <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
       <property name="locations">
       		<value>/WEB-INF/config/jdbc/jdbc.properties</value>
       </property>
     </bean>
     
    	<bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
    	     <property name="driver" value="${jdbc.driver}"/>  
    	     <property name="url" value="${jdbc.url}"/> 
    	     <property name="username" value="${jdbc.username}"/> 
    	     <property name="password" value="${jdbc.password}"/>  
    	</bean>
    
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <property name="dataSource" ref="dataSource" />
          <property name="configLocation" value="classpath:mybatis/model/modelConfig.xml"/>
          <property name="mapperLocations" value="classpath:mybatis/mappers/*.xml" />
       </bean>
    
    	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    	    <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    	 </bean>
     
     	<!-- Mybatis와 연동하는 DAO에서는 아래와 같이 기술되어야 한다. 
    		 	참조변수로 선언
    		 	@autowired
    		 	private SqlSession sqlSession; -->
     </beans>
    ```
    
3. mybatis 관련 modelConfig.xml 설정하기
    1. 파일 위치 resources에 mybatis 폴더 생성후 안에 model 폴더 생성 후 안에 modelConfig.xml 만들어 아래내용 추가
    
    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
              "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
     <mapper namespace="mapper.article">
     
     	<resultMap type="article"  id="articleResult">
    		<!-- <result property="필드명"  column="컬럼명"/>	 -->
    		<result property="articleNo"  column="articleno"/>	
    		<result property="title"  column="title"/>	
    		<result property="content"  column="content"/>	
    		<result property="writeDate"  column="writedate"/>	
    		<result property="memberId"  column="memberid"/>	
    	</resultMap>
     
     
    	<!-- select요소 :select쿼리문실행 
    	     id속성 : unique해야한다. 각 요소를 구분하기 위한 용도 -->
    	<!-- 전체 게시물수 조회 -->
    	<select id="totalCnt" resultType="int">
    	  <![CDATA[		
    		select count(*) from article
    	  ]]>
    	</select>
    	
    	<!-- 특정글의 글번호 조회 -->
    	<select id="getArticleNo" 
    	        resultType="int"
    	        parameterType="int">
    	  <![CDATA[		
    		select articleno from article where articleno=#{no}
    	  ]]>
    	</select>
     
     	<!-- 특정글의 제목 조회 -->
    	 <select id="titleByNo" 
    	 		resultType="string"
    	 		parameterType="int">
    	  <![CDATA[		
    		select title from article where articleno=#{no}
    	  ]]>
    	</select>
    	
    	<!-- 특정글의 상세 조회 : 
    	       쿼리실행결과로 받은 레코드 수가 1개
    	      쿼리실행결과로 받은   컬럼  수가 n개..타입이 다양하다 -->
    	<select id="articleDetail"
    			resultType="article"
    	        parameterType="int">
    	  <![CDATA[	
    	select * from article where articleno=#{no}
    	  ]]>
    	</select>
    		
    	<select id="articleDetail2"
    			resultMap="articleResult"     
    	        parameterType="int">
    	  <![CDATA[	
    	select articleno,title,content,writedate,memberid from article where articleno=#{no}
    	  ]]>
    	</select>
    	
    	
    	<!-- 전체목록조회 -->
    	<select id="articleAllList"  resultType="article">
    	<![CDATA[
    		select * from article
    	]]>
    	</select>
    	
    	<!-- 전체목록조회2 :resultMap사용 -->
    	<select id="articleAllList2"  resultMap="articleResult">
    	<![CDATA[
    		select * from article
    	]]>
    	</select>
    	
    	<!-- 글등록  -->
    	<insert id="insertArticle"  parameterType="com.ourcom.article.domain.Article">
    		<![CDATA[
    		insert into article(articleno,title,content,writeDate,memberId)
    		values(seq_article.nextval,#{title},#{content},sysdate,#{memberId})
    		]]>
    	</insert>
    	
    	<!-- 특정글 수정 -->
    	<update id="updateArticle" parameterType="com.ourcom.article.domain.Article">
    		<![CDATA[
    		update article 
    		set title=#{title},content=#{content} 
    		where articleno=#{articleNo}
    		]]>
    	</update>
    	
    	<!-- 삭제 -->
    	<delete id="deleteArticle" parameterType="java.lang.Integer">
    		<![CDATA[
    		delete from article
    		where articleno=#{articleNo}
    		]]>
    	</delete>
    </mapper>
    ```
    
    1. mybatis 관련 modelConfig.xml 설정하기
        1. 파일 위치 resources에 mybatis 폴더 생성후 안에 mappers 폴더 생성 후 안에 article.xml 만들어 아래내용 추가 (DB 연동시 사용될 SQL 문 저장소)
        
        ```xml
        <?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE configuration 	PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        	"http://mybatis.org/dtd/mybatis-3-config.dtd">
        
        	<!-- MyBatis에 내장된(built-in) typeAlias는 아래와 같이 다수개가 존재한다
        		Alias	Mapped Type
        		string	String
        		byte	Byte
        		long	Long
        		short	Short
        		int	Integer
        		integer	Integer//
        		double	Double
        		float	Float
        		boolean	Boolean
        		date	Date
        		map		Map
        		hashmap	HashMap
        		list	List
        		arraylist	ArrayList
        		collection	Collection -->
        
        <!-- 우리는 action-mybatis.xml문서에서 modelConfig.xml문서를 아래와 같이 설정하였다
        <bean id="sqlSessionFactory"   class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource" />
           	  <property name="configLocation"
                 value="classpath:mybatis/model/modelConfig.xml" />
              <property name="mapperLocations" value="classpath:mybatis/mappers/*.xml" />
        </bean>
        -->
        
        <configuration>
        	<typeAliases>
          <!--<typeAlias type="패키지명.클래스명"    alias="클래스별칭"/>
          	  <typeAlias type="java.lang.String" alias="string"/>	
        	  <typeAlias type="java.util.List"   alias="list"/> -->
        	  <typeAlias type="com.ourcom.article.domain.Article"    
        	                                     alias="article"/>
        	  <!-- GoodsVO클래스는 상품이미지테이블(goods_detail_image) 관련 데이터바인딩용 객체인데
        	            별칭(alias)으로 goodVO이라고 칭하겠다-->
        	  <typeAlias type="com.ourcom.goods.domain.GoodsVO" alias="goodVO"/>
        	  
        	  <!-- ImageFileVO클래스는 상품이미지테이블(goods_detail_image) 관련 데이터바인딩용 객체로
        	  	     별칭(alias)으로 imageFileVO이라고 칭하겠다	-->	                                     
        	  <typeAlias type="com.ourcom.goods.domain.ImageFileVO" alias="imageFileVO"/>	                                     
        	</typeAliases>
        </configuration>
        ```
        
    2. Service에서 SQL문 사용시 사용문
        
        ```java
        package com.ourcom.article.service;
        
        import java.util.List;
        
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.stereotype.Service;
        
        import com.ourcom.article.domain.Article;
        import com.ourcom.article.repository.ArticleRepository;
        @Service
        public class ArticleServiceImpl implements ArticleService{
        	/*action-mybatis.xml에서   sqlSession이름으로  bean객체만들어진 것을
        	 * 자동주입(@Autowired)시켜준다
        	<bean id="sqlSession"
        		  class="org.mybatis.spring.SqlSessionTemplate">
        		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
        	</bean>*/
        	
        	 @Autowired 
        	 private ArticleRepository articleRepository ;
        	
        	 /*여기에서는 action-mybatis.xml에서   
        	 실행하고자하는 쿼리를 가진 문서는 아래와 같이 설정하였다
        	 <property name="mapperLocations" 
        	           value="classpath:mybatis/mappers/*.xml" />*/
        	//전체 게시물수 조회
        	 @Override
        	 public int getTotalCnt() throws Exception {
        		 int cnt = articleRepository.getTotalCnt();
        		return cnt;
        	 }
        	 
        	 //특정글의 글번호 조회
        	 //파라미터 int no:조회하고자하는 글번호
        	 @Override
        	 public int getAriticleNo(int no) throws Exception {
        		 int cnt = articleRepository.getAriticleNo(no);
        		return cnt;
        	 }
        	 
        	 //특정글의 제목 조회
        	 //파라미터 int no:조회하고자하는 글번호
        	 @Override
        	 public String getTitleNo(int no) throws Exception {
        		 String title = articleRepository.getTitleNo(no);
        		 return title;
        	 }
        	 
        	 //특정글의 상세 조회
        	 //파라미터 int no:조회하고자하는 글번호
        	 @Override
        	 public Article getArticleDetail(int no) throws Exception {
        		 return (Article)articleRepository.getArticleDetail(no);
        	 }
        	 //Map을 이용하여 설정
        	 @Override
        	 public Article getArticleDetail2(int no) throws Exception {
        		 return (Article)articleRepository.getArticleDetail2(no);
        	 }
        	 //전체 목록 조회
        	 @Override
        	 public List<Article> getArticleAllList() throws Exception{
        		return articleRepository.getArticleAllList();
        	 }
        	 //Map을 이용하여 설정
        	 @Override
        	 public List<Article> getArticleAllList2() throws Exception{
        		return articleRepository.getArticleAllList2();
        	 }
        	 //글등록
        	 @Override
        	public void insertArticle(Article article) throws Exception {
        		articleRepository.insertArticle(article);
        	}
        	 @Override
        	public int updateArticle(Article article) throws Exception {
        		int cnt = articleRepository.updateArticle(article);
        		return cnt;
        	}
        	//삭제하기 
        	 @Override
        	public int deleteArticle(int no) throws Exception {
        		int cnt = articleRepository.deleteArticle(no);
        		return cnt;
        	}
        }
        ```
        
        .
